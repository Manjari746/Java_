
public class solution {

	public static int[][] subsets(int input[]) {
		return subsets(input, 0);
	}

	public static int[][] subsets(int input[], int si) {
		if (si >= input.length) {
			int ans[][] = new int[1][0];
			return ans;
		}
		int[][] smallans = subsets(input, si + 1);
		int[][] ans = new int[smallans.length * 2][];

		int k = 0;
		for (int i = 0; i < smallans.length; i++) {
			 ans[i] = new int[smallans[i].length];
			for (int j = 0; j < smallans[i].length; j++) {
				ans[i][j] = smallans[i][j];
			}
			k++;
		}
		for (int i = 0; i < smallans.length; i++) {
			ans[k + i] = new int[smallans[i].length + 1];
			ans[k + i][0] = input[si];
			for (int j = 1; j <= smallans[i].length; j++) {
				ans[i + k][j] = smallans[i][j - 1];
			}

		}
		return ans;

	}
}

// public class solution {

// 	// Return a 2D array that contains all the subsets
// 	public static int[][] subsets(int input[]) {
// 		// Write your code here
// 		// if(input.length ==0){
// 		// 	int [][]output= new int[1][1];
// 		// 	return output;
// 		// }

// 		int [][]output= helper(input, 0);
// 		return output;

// 	}

// 	public static int[][] helper(int input[], int si){

// 		if (si >= input.length) {
// 			int ans[][] = new int[1][0];
// 			return ans;
// 		}

// 		int [][]small_output= helper(input, si+1);
// 		int k=0;
// 		int l = small_output.length;
// 		int output[][]= new int[l*2][];

// 		for( int i =0; i<small_output.length; i++){
// 			for(int j =0; j<small_output[i].length; j++){
// 				output[i][j]= small_output[i][j];
// 			}
// 			k++;
// 		}

// 		for (int i = 0; i < small_output.length; i++) {
// 			output[k][0]= input[si];
// 			for (int j = 0; j < small_output[i].length; j++) {
// 				output[k][j+1] = small_output[i][j];
// 			}
// 			k++;
// 		}
// 		return output;
// 	}
// }
