public class Solution {

	/*
	 * Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
          T data; 
          BinaryTreeNode<T> left; 
          BinaryTreeNode<T>right;
	 
	  public BinaryTreeNode(T data) { this.data = data; } }
	 */

	/*
	 * LinkedListNode Class
	 *
	 * 
	 * class LinkedListNode<T> { T data; LinkedListNode<T> next;
	 * 
	 * public LinkedListNode(T data) { this.data = data; } }
	 */

public static LinkedListNode<Integer> constructLinkedList(BinaryTreeNode<Integer> root) {

        if( root == null){
            return null;
        }

        LinkedListNode<Integer> node1= constructLinkedList(root.left);
        LinkedListNode<Integer> node= new LinkedListNode<Integer>(root.data);
        LinkedListNode<Integer> temp = node1;

        if(temp!= null){
        while(temp.next!= null){
            temp= temp.next;
        }
        temp.next= node;
        }

        LinkedListNode<Integer> node2= constructLinkedList(root.right);
        node.next = node2;
        if(node1== null){
            node1= node;
        }

        return node1;


}
}


//**********************************APPROACH -2**************************************8
public class Solution {

	/*
	 * Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
          T data; 
          BinaryTreeNode<T> left; 
          BinaryTreeNode<T>right;
	 
	  public BinaryTreeNode(T data) { this.data = data; } }
	 */

	/*
	 * LinkedListNode Class
	 *
	 * 
	 * class LinkedListNode<T> { T data; LinkedListNode<T> next;
	 * 
	 * public LinkedListNode(T data) { this.data = data; } }
	 */

// 	public static LinkedListNode<Integer> constructLinkedList(BinaryTreeNode<Integer> root) {

//         if( root == null){
//             return null;
//         }
        
//         LinkedListNode<Integer> left , right;
//          LinkedListNode<Integer> head= null ,root1 = null;
       
//         if( root.left == null ){
//             root1= new LinkedListNode<>( root.data);
//             head = root1;

//         }
    
//         if( root.left != null ){
            
//         	left = constructLinkedList( root.left);
//             head = left ;
//             root1=new  LinkedListNode<Integer>( root.data);
           
//             while( left.next != null){
//                 left = left.next;
//             }
            
//             left.next = root1;
               
            
//         }
        
//           if(root.right!= null){
//             right  = constructLinkedList( root.right);
//       root1.next = right;
//         }
      
//         return head;
// 	}
// }
