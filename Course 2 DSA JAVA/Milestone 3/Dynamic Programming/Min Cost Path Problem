public class Solution {

	public static int minCostPath(int[][] input) {
		//Your code goes here
		int n=input.length;
		int m =input[0].length;
		int dp[][]= new int[n][m];
		return mincosthelper(input, 0, 0,n,m,dp );
	}

	public static int mincosthelper(int[][] input,int i, int j , int n , int m, int dp[][]){

		if( i== n-1 && j== m-1){
			return input[i][j];
		}
		if(i >=n || j>=m){
			return Integer.MAX_VALUE;
		}
		dp[n-1][m-1]= input[n-1][m-1];
		// dp[n-1][m-2]= input[n-1][m-2]+dp[n-1][m-1];
		// dp[n-2][m-1]= input[n-2][m-1]+ dp[n-1][m-1];

		for( int row =n-1; row>=0; row--){

			for( int col= m-1; col>=0; col--){

				int ans1, ans2, ans3;
				if(dp[row+1][col] == ){
				ans1 = dp[row+1][col];
				dp[row+1][col]= ans1 ;
				}
				else{

				}
				 ans2= dp[row+1][col+1];
				ans3= dp[row][col+1];
			}
		}
		int right = mincosthelper(input, i,j+1, n,m);
		int diagonal= mincosthelper(input, i+1, j+1, n, m);
		int down =mincosthelper(input, i+1, j, n, m);

		return input[i][j]+Math.min(right,Math.min(diagonal,down));
	}
}
