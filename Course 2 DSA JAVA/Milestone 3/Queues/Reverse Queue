import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
// APPROACH-1 ---> through Recursion 
public class Solution {

	public static void reverseQueue(Queue<Integer> input) {
		//Your code goes here
		if(input.size()<=1){
    return;
    }
    
    int front = input.poll();
    reverseQueue(input);
    input.add(front);
		
	}

}

//APPROACH-2 ---> try to use reverse a queue using recursion stack
public class Solution {

	public static void reverseQueue(Queue<Integer> input) {
		//Your code goes here
		Stack <Integer> s= new Stack<>();
		while(!input.isEmpty()){
			int c= input.poll();
			s.push(c);
		}

		while(!s.empty()){
			input.add(s.pop());
		}
	}

}
